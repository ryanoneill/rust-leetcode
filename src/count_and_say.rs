/// The *count-and-say* sequence is a sequence of digit strings defined by the recursive formula:
///
/// * `countAndSay(1) = "1"`
/// * `countAndSay(n) is the run-length encoding of countAndSay(n-1)`.
///
/// Run-length encoding (RLE) is a string compression method that works by replacing consecutive
/// identical characters (repeated 2 or more times) with the concatenation of the character and the
/// number marking the count of the characters (length of the run). For example, to compress the
/// string `"3322251"` we replace the `"33"` with `"23"`, replace the `"222"` with `"32"`, replace
/// `"5"` with `"15"` and replace `"1"` with `"11"`. Thus the compressed string becomes
/// `"23321511"`.
///
/// Given a positive integer `n`, return the `nth` element of the *count-and-say* sequence.
struct Solution;

impl Solution {

    fn rle(s: String) -> String {
        let mut letters = Vec::new();
        let mut last = ' ';
        let mut count = 0;

        for c in s.chars() {
            if count == 0 {
                count = 1;
                last = c;
            } else if c == last {
                count += 1;
            } else {
                for c in count.to_string().chars() {
                    letters.push(c);
                }
                letters.push(last);

                count = 1;
                last = c;
            }
        }
        for c in count.to_string().chars() {
            letters.push(c);
        }
        letters.push(last);

        letters.into_iter().collect()
    }

    pub fn count_and_say(n: i32) -> String {
        let n = n as usize;
        let mut result = "1".to_string();

        for _ in 2..=n {
            result = Self::rle(result);
        }

        result
    }

}

#[cfg(test)]
mod tests {
    use super::Solution;

    #[test]
    fn example_1() {
        let n = 4;
        let result = Solution::count_and_say(n);
        assert_eq!(result, "1211");
    }

    #[test]
    fn example_2() {
        let n = 1;
        let result = Solution::count_and_say(n);
        assert_eq!(result, "1");
    }

    #[test]
    fn example_3() {
        let n = 30;
        let result = Solution::count_and_say(n);
        let expected
        assert_eq!(result, expected);
    }

}
