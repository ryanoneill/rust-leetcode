/// You are given two strings `s` and `t`.
///
/// String `t` is generated by random shuffling string `s` and then add one more letter at a random
/// position.
///
/// Return the letter that was added to `t`.
struct Solution;

impl Solution {

    // 0 <= s.length <= 1000
    // t.length == s.length + 1
    // `s` and `t` consist of lowercase English letters.
    pub fn find_the_difference(s: String, t: String) -> char {
        let mut result = ' ';
        let mut counts = vec![0; 26];

        for c in s.chars() {
            let index = (c as usize) - ('a' as usize);
            counts[index] += 1;
        }

        for c in t.chars() {
            let index = (c as usize) - ('a' as usize);
            if counts[index] == 0 {
                result = c;
                break;
            } else {
                counts[index] -= 1;
            }
        }

        result
    }

}

#[cfg(test)]
mod tests {
    use super::Solution;

    #[test]
    fn example_1() {
        let s = "abcd".to_string();
        let t = "abcde".to_string();
        let result = Solution::find_the_difference(s, t);
        assert_eq!('e', result);
    }

    #[test]
    fn example_2() {
        let s = "".to_string();
        let t = "y".to_string();
        let result = Solution::find_the_difference(s, t);
        assert_eq!('y', result);
    }

}
