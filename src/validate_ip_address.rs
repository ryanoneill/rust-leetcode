struct Solution;

impl Solution {

    fn validate_ipv6_part(chars: &Vec<char>, left: usize, right: usize) -> bool {
        let diff = right - left;
        let mut result = diff >= 1 && diff <= 4;

        if result {
            for i in left..right {
                match chars[i] {
                    '0' => {}
                    '1' => {}
                    '2' => {}
                    '3' => {}
                    '4' => {}
                    '5' => {}
                    '6' => {}
                    '7' => {}
                    '8' => {}
                    '9' => {}
                    'a' => {}
                    'A' => {}
                    'b' => {}
                    'B' => {}
                    'c' => {}
                    'C' => {}
                    'd' => {}
                    'D' => {}
                    'e' => {}
                    'E' => {}
                    'f' => {}
                    'F' => {}
                    _   => { result = false; break; }
                }
            }
        }

        result
    }

    fn validate_ipv4_part(chars: &Vec<char>, left: usize, right: usize) -> bool {
        let diff = right - left;
        let mut result = diff >= 1 && diff <= 3;

        let mut value = 0;

        if result {
            for i in left..right {
                value *= 10;
                match chars[i] {
                    '0' => { if value == 0 && diff > 1 { result = false; break; }}
                    '1' => { value += 1; }
                    '2' => { value += 2; }
                    '3' => { value += 3; }
                    '4' => { value += 4; }
                    '5' => { value += 5; }
                    '6' => { value += 6; }
                    '7' => { value += 7; }
                    '8' => { value += 8; }
                    '9' => { value += 9; }
                    _   => { result = false; break; }
                }
            }
        }
        if result {
            result = value <= 255;
        }
        result
    }

    pub fn valid_ip_address(query_ip: String) -> String {
        let mut result = true;
        let mut is_ipv4 = true;

        let chars: Vec<char> = query_ip.chars().collect();
        let n = chars.len();

        let mut left = 0;
        let mut right = 0;

        let mut parts = 0;

        for i in 0..n {
            let c = chars[i];
            match c {
                '.' => {
                    if parts == 0 {
                        is_ipv4 = true;
                        if !Self::validate_ipv4_part(&chars, left, right) {
                            result = false;
                            break;
                        }
                    } else if !is_ipv4 {
                        result = false;
                        break;
                    } else {
                        if !Self::validate_ipv4_part(&chars, left, right) {
                            result = false;
                            break;
                        }
                    }
                    parts += 1;
                    left = i + 1;
                    right = left;
                }
                ':' => {
                    if parts == 0 {
                        is_ipv4 = false;
                        if !Self::validate_ipv6_part(&chars, left, right) {
                            result = false;
                            break;
                        } 
                    } else if is_ipv4 {
                        result = false;
                        break;
                    } else if !Self::validate_ipv6_part(&chars, left, right) {
                        result = false;
                        break;
                    } 
                    parts += 1;
                    left = i + 1;
                    right = left;
                }
                _ => { right += 1; }
            }
        }
        if result {
            parts += 1;
            if left < n {
                if is_ipv4 {
                    result = Self::validate_ipv4_part(&chars, left, right);
                    result = result && parts == 4;
                } else {
                    result = Self::validate_ipv6_part(&chars, left, right);
                    result = result && parts == 8;
                }
            } else {
                result = false;
            }
        }
        if result {
            if is_ipv4 {
                "IPv4".to_string()
            } else {
                "IPv6".to_string()
            }
        } else {
            "Neither".to_string()
        }
    }

}

#[cfg(test)]
mod tests {
    use super::Solution;

    #[test]
    fn example_1() {
        let query_ip = str!("172.16.254.1");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "IPv4");
    }

    #[test]
    fn example_2() {
        let query_ip = str!("2001:0db8:85a3:0:0:8A2E:0370:7334");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "IPv6");
    }

    #[test]
    fn example_3() {
        let query_ip = str!("256.256.256.256");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "Neither");
    }

    #[test]
    fn example_4() {
        let query_ip = str!("12..33.4");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "Neither");
    }

    #[test]
    fn example_5() {
        let query_ip = str!("a:b:c:d:e:f::a");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "Neither");
    }

    #[test]
    fn example_6() {
        let query_ip = str
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "Neither");
    }

    #[test]
    fn example_7() {
        let query_ip = str!("192.0.0.1");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "IPv4");
    }

    #[test]
    fn example_8() {
        let query_ip = str!("192.02.0.1");
        let result = Solution::valid_ip_address(query_ip);
        assert_eq!(result, "Neither");
    }

}
